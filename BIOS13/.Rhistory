# Define parameters
pars <- list(b = 1, g = 0.5, mu_j = 0.3, mu_0 = 0.2, c = 0.01)
# Plotting J isocline, using A as a function of J
J <- seq(0, 300, by = 0.1)
A <- J * (pars$g + pars$mu_j) / pars$b
plot(A, J, type='l', col='blue', xlab='J', ylab='A')
# Plotting A isocline
A <- pars$g * J /pars$mu_0(1 + pars$c *  pars$g * J - pars$mu_0 * pars$g - pars$mu_0 * pars$mu_j /
(pars$mu_0 * pars$c * (pars$g + pars$mu_j)))
lines(J, A_iso, col='red')
A
A
# Plotting J isocline, using A as a function of J
J <- seq(0, 300, by = 0.01)
A <- J * (pars$g + pars$mu_j) / pars$b
plot(A, J, type='l', col='blue', xlab='J', ylab='A')
# Plotting A isocline
A <- pars$g * J /pars$mu_0(1 + pars$c *  pars$g * J - pars$mu_0 * pars$g - pars$mu_0 * pars$mu_j /
(pars$mu_0 * pars$c * (pars$g + pars$mu_j)))
lines(J, A_iso, col='red')
rm(list = ls())
library(deSolve)
# Define parameters
pars <- list(b = 1, g = 0.5, mu_j = 0.3, mu_0 = 0.2, c = 0.01)
# Plotting J isocline, using A as a function of J
J <- seq(0, 300, by = 0.1)
A <- J * (pars$g + pars$mu_j) / pars$b
plot(A, J, type='l', col='blue', xlab='J', ylab='A')
# Plotting A isocline
A <- pars$g * J /pars$mu_0(1 + pars$c *  pars$g * J - pars$mu_0 * pars$g - pars$mu_0 * pars$mu_j /
(pars$mu_0 * pars$c * (pars$g + pars$mu_j)))
lines(J, A, col='red')
JAfunc <- function(t, JA, pars) {
# Define isoclines
J <- JA[1] # J_isocline is the first element of the vector
A <- JA[2] # A_isocline is the second element of the vector
dJdt <- pars$b * A - pars$g * J - pars$mu_j * J
dAdt <- pars$g * J - pars$mu_0 * A - pars$mu_0 * pars$c * A^2
return(list(c(dJdt, dAdt)))
}
time_vec <- seq(0, 100, 0.1)
JA0 <- c(J = 0, A = 0) # Initial values for A and J
results <- ode(y = JA0, times = time_vec, func = JAfunc, parms = pars)
# Plot the result in phase space:
# Plot the result in phase space:
plot(results[,2], results[,1], type='l', col='black', xlab='A', ylab='J')
rm(list = ls())
###########################
# Setting system parameters first:
pars <- list(a=1,b=1,c=1,r=1)
# Plotting P isocline, using Q as a function of P:
P <- seq(0,5,by=0.1) # a range of P-values
Q <- pars$a/(pars$c*P) - pars$b/pars$c # the corresponding Q-values
plot(P, Q, type='l', col='blue', ylim=c(0,1), xlim=c(0,1.5))
# Q-isocline:
Q <- pars$r/pars$b*P
lines(P,Q,col='red')
# Next, use ode to calculate a trajectory:
library(deSolve)
# The set of differential equations:
PQfunc <- function(t,PQ,pars) {
P <- PQ[1]
Q <- PQ[2]
dPdt <- pars$a - pars$b*P - pars$c*P*Q
dQdt <- pars$r*P - pars$b*Q
return(list(c(dPdt,dQdt)))
}
time_vec <- seq(0,10,by=0.1)
PQ0 <- c(P=0,Q=0) # Initial condition
results <- ode(func = PQfunc, times = time_vec, y = PQ0, parms = pars)
# Plot the result in phase space:
lines(results[,2],results[,3],col='black')
results
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin1.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin1.R")
rm(list = ls())
library(deSolve)
# Define parameters
pars <- list(b = 1, g = 0.5, mu_j = 0.3, mu_0 = 0.2, c = 0.01)
# Plotting J isocline, using A as a function of J
J <- seq(0, 300, by = 0.1)
A <- J * (pars$g + pars$mu_j) / pars$b
plot(A, J, type='l', col='blue', xlab='J', ylab='A')
# Plotting A isocline
A <- pars$g * J /pars$mu_0(1 + pars$c * (pars$g * J - pars$mu_0 * pars$g - pars$mu_0 * pars$mu_j /
(pars$mu_0 * pars$c * (pars$g + pars$mu_j))))
lines(J, A, col='red')
rm(list = ls())
library(deSolve)
# Define parameters
pars <- list(b = 1, g = 0.5, mu_j = 0.3, mu_0 = 0.2, c = 0.01)
# Plotting J isocline, using A as a function of J
J <- seq(0, 300, by = 0.1)
A <- J * (pars$g + pars$mu_j) / pars$b
plot(J, A, type='l', col='blue', xlab='J', ylab='A')
# Plotting A isocline
A <- pars$g * J /pars$mu_0(1 + pars$c * (pars$g * J - pars$mu_0 * pars$g - pars$mu_0 * pars$mu_j /
(pars$mu_0 * pars$c * (pars$g + pars$mu_j))))
lines(J, A, col='red')
JAfunc <- function(t, JA, pars) {
# Define isoclines
J <- JA[1] # J_isocline is the first element of the vector
A <- JA[2] # A_isocline is the second element of the vector
dJdt <- pars$b * A - pars$g * J - pars$mu_j * J
dAdt <- pars$g * J - pars$mu_0 * A - pars$mu_0 * pars$c * A^2
return(list(c(dJdt, dAdt)))
}
time_vec <- seq(0, 100, 0.1)
JA0 <- c(J = 0, A = 0) # Initial values for A and J
results <- ode(y = JA0, times = time_vec, func = JAfunc, parms = pars)
# Plot the result in phase space:
# Plot the result in phase space:
plot(results[,2], results[,3], type='l', col='black', xlab='A', ylab='J')
rm(list = ls())
library(deSolve)
# Define parameters
pars <- list(b = 1, g = 0.5, mu_j = 0.3, mu_0 = 0.2, c = 0.01)
# Plotting J isocline, using A as a function of J
J <- seq(0, 5, by = 0.1)
A <- J * (pars$g + pars$mu_j) / pars$b
plot(J, A, type='l', col='blue', xlab='J', ylab='A')
# Plotting A isocline
A <- pars$g * J /pars$mu_0(1 + pars$c * (pars$g * J - pars$mu_0 * pars$g - pars$mu_0 * pars$mu_j /
(pars$mu_0 * pars$c * (pars$g + pars$mu_j))))
lines(J, A, col='red')
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin1.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin1.R")
rm(list = ls())
library(deSolve)
# Define parameters
pars <- list(b = 1, g = 0.5, mu_j = 0.3, mu_0 = 0.2, c = 0.01)
# Plotting J isocline, using A as a function of J
J <- seq(0, 5, by = 0.1)
A <- J * (pars$g + pars$mu_j) / pars$b
plot(J, A, type='l', col='blue', xlab='J', ylab='A')
# Plotting A isocline
A <- pars$g * J /pars$mu_0(1 + pars$c * (pars$g * pars$b - pars$mu_0 * pars$g - pars$mu_0 * pars$mu_j /
(pars$mu_0 * pars$c * (pars$g + pars$mu_j))))
lines(J, A, col='red')
rm(list = ls())
library(deSolve)
# Define parameters
pars <- list(b = 1, g = 0.5, mu_j = 0.3, mu_0 = 0.2, c = 0.01)
# Plotting J isocline, using A as a function of J
J <- seq(0, 5, by = 0.1)
A <- J * (pars$g + pars$mu_j) / pars$b
plot(J, A, type='l', col='blue', xlab='J', ylab='A')
# Plotting A isocline
A <- pars$g * J /pars$mu_0 + (pars$g * pars$b - pars$mu_0 * pars$g - pars$mu_0 * pars$mu_j /
(pars$g + pars$mu_j))
lines(J, A, col='red')
JAfunc <- function(t, JA, pars) {
# Define isoclines
J <- JA[1] # J_isocline is the first element of the vector
A <- JA[2] # A_isocline is the second element of the vector
dJdt <- pars$b * A - pars$g * J - pars$mu_j * J
dAdt <- pars$g * J - pars$mu_0 * A - pars$mu_0 * pars$c * A^2
return(list(c(dJdt, dAdt)))
}
time_vec <- seq(0, 100, 0.1)
JA0 <- c(J = 0, A = 0) # Initial values for A and J
results <- ode(y = JA0, times = time_vec, func = JAfunc, parms = pars)
# Plot the result in phase space:
# Plot the result in phase space:
plot(results[,2], results[,3], type='l', col='black', xlab='A', ylab='J')
time_vec <- seq(0, 5, 0.1)
JA0 <- c(J = 0, A = 0) # Initial values for A and J
results <- ode(y = JA0, times = time_vec, func = JAfunc, parms = pars)
# Plot the result in phase space:
# Plot the result in phase space:
plot(results[,2], results[,3], type='l', col='black', xlab='A', ylab='J')
# Plotting J isocline, using A as a function of J
J <- seq(0, 5, by = 0.1)
A <- J * (pars$g + pars$mu_j) / pars$b
plot(J, A, type='l', col='blue', xlab='J', ylab='A')
A
A
lines(J, A, col='red')
rm(list = ls())
library(deSolve)
# Define parameters
pars <- list(b = 1, g = 0.5, mu_j = 0.3, mu_0 = 0.2, c = 0.01)
# Plotting J isocline, using A as a function of J
J <- seq(0, 5, by = 0.1)
A <- J * (pars$g + pars$mu_j) / pars$b
plot(J, A, type='l', col='blue', xlab='J', ylab='A')
# Plotting A isocline
A <- pars$g * J /pars$mu_0 + (pars$g * pars$b - pars$mu_0 * pars$g - pars$mu_0 * pars$mu_j /
(pars$g + pars$mu_j))
lines(J, A, col='red')
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin1.R")
rm(list = ls())
library(deSolve)
# Define parameters
pars <- list(b = 1, g = 0.5, mu_j = 0.3, mu_0 = 0.2, c = 0.01)
# Plotting J isocline, using A as a function of J
J <- seq(0, 500, by = 0.1)
A <- J * (pars$g + pars$mu_j) / pars$b
plot(J, A, type='l', col='blue', xlab='J', ylab='A')
# Plotting A isocline
A <- pars$g * J /pars$mu_0 + (pars$g * pars$b - pars$mu_0 * pars$g - pars$mu_0 * pars$mu_j /
(pars$g + pars$mu_j))
lines(J, A, col='red')
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIO13_examQ3eii.R")
rm(list = ls())
library(deSolve)
# Define parameters
pars <- list(b = 1, g = 0.5, mu_j = 0.3, mu_0 = 0.2, c = 0.01)
# Plotting J isocline, using A as a function of J
J <- seq(0, 500, by = 0.1)
A <- J * (pars$g + pars$mu_j) / pars$b
plot(J, A, type='l', col='blue', xlab='J', ylab='A')
# Plotting A isocline
A <- pars$g * J /pars$mu_0 + (pars$g * pars$b - pars$mu_0 * pars$g - pars$mu_0 * pars$mu_j /
(pars$g + pars$mu_j))
lines(J, A, col='red')
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIO13_examQ3eii.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
rm(list = ls())
library(deSolve)
LV_isoclines <- function(r,a,mu) {
P <- list( r=2, a=1, mu=2 )
# Extracting parameters from the list
r <- P$r
a <- P$a
mu <- P$mu
# equilibria (we use these coordinates to draw the isoclines):
ne <- mu/a
pe <- r/a
return(LV_isoclines)
# prey isocline:
plot(c(0,2*ne), c(pe,pe), type='l', col='blue')
# predator isocline:
lines(c(ne,ne), c(0,2*ne), col='red')
}
LV_isoclines <- function(r,a,mu) {
P <- list( r=2, a=1, mu=2 )
# Extracting parameters from the list
r <- P$r
a <- P$a
mu <- P$mu
# equilibria (we use these coordinates to draw the isoclines):
ne <- mu/a
pe <- r/a
return(LV_isoclines)
# prey isocline:
plot(c(0,2*ne), c(pe,pe), type='l', col='blue')
# predator isocline:
lines(c(ne,ne), c(0,2*ne), col='red')
}
LV_isoclines <- function(r, a, mu){
y = r/a #prey
x = mu/a #predator
return(list(y = y , x = x))
}
isovalues <- LV_isoclines(1,1,2)
# plot(isovalues$x, type='l', xlim=c(0,10), ylim=c(0,5), xlab='predator', ylab='prey')
# abline(h = isovalues$y)
#
# lines(isovalues$y, type='l')
# abline(v = isovalues$x)
LV_sys <- function(t, np, P) {
n <- np[1] #prey
p <- np[2] #predator
dndt <- P$r*n - P$a*n*p
dpdt <- P$a*n*p - P$mu*p
return(list(c(dndt, dpdt)))
}
np0 <- c(2, 1)
P <- list( r=2, a=1, mu=2)
timevec <- seq( 0, 10, by=0.1 )
out <- ode( y = np0, func = LV_sys, times = timevec, parms = P)
#print(out)
plot(out[,1], out[,2], type='l', col='blue')
lines(out[,1], out[,3], col='red')
plot(out[,2], out[,3], type='l', col='green', xlab='n', ylab='p', main='Phase Plane Plot')
##############
computeJacobian <- function(r, a, mu) {
J <- matrix(0, nrow = 2, ncol = 2)  # Initialize a 2x2 matrix for the Jacobian
# Calculate the elements of the Jacobian matrix
J[1, 1] <- 0
J[1, 2] <- -mu
J[2, 1] <- r
J[2, 2] <- 0
return(J)  # Return the Jacobian matrix
}
P <- list(r=1, a=1, mu=2)
eig <- eigen(computeJacobian(P$r,P$a,P$mu))
print(eig)
LV_isoclines <- function(r,a,mu) {
# equilibria (we use these coordinates to draw the isoclines):
ne <- mu/a
pe <- r/a
# prey isocline:
plot(c(0,2*ne), c(pe,pe), type='l', col='blue')
# predator isocline:
lines(c(ne,ne), c(0,2*ne), col='red')
}
LV_sys <- function(t, np, P) {
# extract vector content:
n <- np[1]
p <- np[2]
# calculate the two growth rates:
dndt <- P$r*n - P$a*n*p
dpdt <- P$a*n*p - P$mu*p
list(c(dndt, dpdt )) # the result as a vector in a list
}
rm(list = ls())
# First load the deSolve package:
library(deSolve)
# set up a vector of time-points for the output:
timevec <- seq( 0, 10, by=0.1 )
# we need a list of parameters:
P <- list( r=2, a=1, mu=2 )
np0 <- c(n=2,p=1) # initial population sizes
# define the growth function:
LV_sys <- function(t, np, P) {
# extract vector content:
n <- np[1]
p <- np[2]
# calculate the two growth rates:
dndt <- P$r*n - P$a*n*p
dpdt <- P$a*n*p - P$mu*p
list(c(dndt, dpdt )) # the result as a vector in a list
}
# call the ode function to solve the differnetial equation:
out <- ode( y = np0, func = LV_sys, times = timevec, parms = P)
time <- out[,'time']
n <- out[,'n']
p <- out[,'p']
# plot the output in two panels:
op <- par(mfrow=c(2,1))
# first population sizes over time:
plot( time, n, type='l', col='blue' )
lines( time, p, type='l', col='red' )
# next the phase plane, starting with the isoclines:
LV_isoclines(P$r, P$a, P$mu)
rm(list = ls())
# First load the deSolve package:
library(deSolve)
# set up a vector of time-points for the output:
timevec <- seq( 0, 10, by=0.1 )
# we need a list of parameters:
P <- list( r=2, a=1, mu=2 )
np0 <- c(n=2,p=1) # initial population sizes
# define the growth function:
LV_sys <- function(t, np, P) {
# extract vector content:
n <- np[1]
p <- np[2]
# calculate the two growth rates:
dndt <- P$r*n - P$a*n*p
dpdt <- P$a*n*p - P$mu*p
list(c(dndt, dpdt )) # the result as a vector in a list
}
# call the ode function to solve the differnetial equation:
out <- ode( y = np0, func = LV_sys, times = timevec, parms = P)
time <- out[,'time']
n <- out[,'n']
p <- out[,'p']
# plot the output in two panels:
op <- par(mfrow=c(2,1))
# first population sizes over time:
plot( time, n, type='l', col='blue' )
lines( time, p, type='l', col='red' )
# next the phase plane, starting with the isoclines:
LV_isoclines(P$r, P$a, P$mu)
LV_isoclines <- function(r,a,mu) {
# equilibria (we use these coordinates to draw the isoclines):
ne <- mu/a
pe <- r/a
# prey isocline:
plot(c(0,2*ne), c(pe,pe), type='l', col='blue')
# predator isocline:
lines(c(ne,ne), c(0,2*ne), col='red')
}
LV_sys <- function(t, np, P) {
# extract vector content:
n <- np[1]
p <- np[2]
# calculate the two growth rates:
dndt <- P$r*n - P$a*n*p
dpdt <- P$a*n*p - P$mu*p
list(c(dndt, dpdt )) # the result as a vector in a list
}
library(deSolve)
# set up a vector of time-points for the output:
timevec <- seq( 0, 10, by=0.1 )
# we need a list of parameters:
P <- list( r=2, a=1, mu=2 )
np0 <- c(n=2,p=1) # initial population sizes
# define the growth function:
LV_sys <- function(t, np, P) {
# extract vector content:
n <- np[1]
p <- np[2]
# calculate the two growth rates:
dndt <- P$r*n - P$a*n*p
dpdt <- P$a*n*p - P$mu*p
list(c(dndt, dpdt )) # the result as a vector in a list
}
# call the ode function to solve the differnetial equation:
out <- ode( y = np0, func = LV_sys, times = timevec, parms = P)
time <- out[,'time']
n <- out[,'n']
p <- out[,'p']
# plot the output in two panels:
op <- par(mfrow=c(2,1))
# first population sizes over time:
plot( time, n, type='l', col='blue' )
lines( time, p, type='l', col='red' )
# next the phase plane, starting with the isoclines:
LV_isoclines(P$r, P$a, P$mu)
# add the trajectory:
lines( n, p)
# plot a square at the initial condition
points(n[1], p[1], pch=0)
# reset graphics parameters:
par(op)
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin1_mod.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIO13_examQ3eii.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin1_mod.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIO13_examQ3eii.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ4e_hooimin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIO13_examQ3eii.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_iso.R")
results
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_iso.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_iso.R")
dAdt
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_iso.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_iso.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_iso.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
results
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_iso.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_iso.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_iso.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_iso.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_iso.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_iso.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_iso.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/StochSys /runMoran.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13exam_Q4chooimin1.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_exam4d_hooimin1.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ4e_hooimin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_exam_Q4c_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_exam_Q4d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_exam_Q4e_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_iso_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_exam_Q3ei_HooiMin.R")
